{"uid":"d7594efc4b3c5e2","name":"Check if user able to get morbidityName by passing invalid morbitity name","fullName":"src/test/resources/features/morbidity.feature:17","historyId":"16b86b5e5cb10ac252f7239b280fce30","time":{"start":1700603018919,"stop":1700603019212,"duration":293},"status":"failed","statusMessage":"expected:<404> but was:<401>","statusTrace":"java.lang.AssertionError: expected:<404> but was:<401>\r\n\tat org.junit.Assert.fail(Assert.java:89)\r\n\tat org.junit.Assert.failNotEquals(Assert.java:835)\r\n\tat org.junit.Assert.assertEquals(Assert.java:647)\r\n\tat org.junit.Assert.assertEquals(Assert.java:633)\r\n\tat stepDifinitions.MorbiditySD.response_status_code_should_be_with_response_body(MorbiditySD.java:145)\r\n\tat ✽.Response status code should be 404  with response body(file:///C:/Users/shubh/IdeaProjects/API_Spark/src/test/resources/features/morbidity.feature:19)\r\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"expected:<404> but was:<401>","statusTrace":"java.lang.AssertionError: expected:<404> but was:<401>\r\n\tat org.junit.Assert.fail(Assert.java:89)\r\n\tat org.junit.Assert.failNotEquals(Assert.java:835)\r\n\tat org.junit.Assert.assertEquals(Assert.java:647)\r\n\tat org.junit.Assert.assertEquals(Assert.java:633)\r\n\tat stepDifinitions.MorbiditySD.response_status_code_should_be_with_response_body(MorbiditySD.java:145)\r\n\tat ✽.Response status code should be 404  with response body(file:///C:/Users/shubh/IdeaProjects/API_Spark/src/test/resources/features/morbidity.feature:19)\r\n","steps":[{"name":"Given  the user has set Authorization to Bearer Token","time":{"start":1700603018920,"stop":1700603018921,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"When  User creates GET request for the  morbidity API endpoint with invalid name","time":{"start":1700603018921,"stop":1700603019207,"duration":286},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Then  Response status code should be 404  with response body","time":{"start":1700603019207,"stop":1700603019209,"duration":2},"status":"failed","statusMessage":"expected:<404> but was:<401>","statusTrace":"java.lang.AssertionError: expected:<404> but was:<401>\r\n\tat org.junit.Assert.fail(Assert.java:89)\r\n\tat org.junit.Assert.failNotEquals(Assert.java:835)\r\n\tat org.junit.Assert.assertEquals(Assert.java:647)\r\n\tat org.junit.Assert.assertEquals(Assert.java:633)\r\n\tat stepDifinitions.MorbiditySD.response_status_code_should_be_with_response_body(MorbiditySD.java:145)\r\n\tat ✽.Response status code should be 404  with response body(file:///C:/Users/shubh/IdeaProjects/API_Spark/src/test/resources/features/morbidity.feature:19)\r\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":3,"hasContent":true,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},"afterStages":[],"labels":[{"name":"tag","value":"03GetRequestWithIvalidMorbitityName"},{"name":"host","value":"Shubhangi"},{"name":"thread","value":"37516@Shubhangi.main(1)"},{"name":"feature","value":"Retrieve all Morbidities"},{"name":"story","value":"Check if user able to get morbidityName by passing invalid morbitity name"},{"name":"suite","value":"Retrieve all Morbidities"},{"name":"testClass","value":"Check if user able to get morbidityName by passing invalid morbitity name"},{"name":"framework","value":"cucumber4jvm"},{"name":"language","value":"java"},{"name":"gherkin_uri","value":"file:///C:/Users/shubh/IdeaProjects/API_Spark/src/test/resources/features/morbidity.feature"},{"name":"package","value":"src.test.resources.features.morbidity_feature.Retrieve all Morbidities"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["03GetRequestWithIvalidMorbitityName"]},"source":"d7594efc4b3c5e2.json","parameterValues":[]}